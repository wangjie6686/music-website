###配置详解
server:
        port: 8003
        servlet:
        context-path: /
        ​
        spring:
        application:
        name: mybatis-plus-druid-demo # 应用名称
        datasource:
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://127.0.0.1:3306/demo?characterEncoding&#61;UTF-8&amp;serverTimezone&#61;Asia/Shanghai&amp;autoReconnect&#61;true&amp;failOverReadOnly&#61;false&amp;zeroDateTimeBehavior&#61;convertToNull&amp;useSSL&#61;false
        username: root
        password: root
        driverClassName: com.mysql.jdbc.Driver
        druid:
        # 连接池的配置信息
        # 初始化时建立物理连接的个数
        initial-size: 3
        # 连接池最小连接数
        min-idle: 3
        # 连接池最大连接数
        max-active: 20
        # 获取连接时最大等待时间&#xff0c;单位毫秒
        max-wait: 60000
        # 申请连接的时候检测&#xff0c;如果空闲时间大于timeBetweenEvictionRunsMillis&#xff0c;执行validationQuery检测连接是否有效。
        test-while-idle: true
        # 既作为检测的间隔时间又作为testWhileIdel执行的依据
        time-between-connect-error-millis: 60000
        # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时&#xff0c;关闭当前连接
        min-evictable-idle-time-millis: 30000
        # 用来检测连接是否有效的sql 必须是一个查询语句
        # mysql中为 select &#39;x&#39;
        # oracle中为 select 1 from dual
        validation-query: select &#39;x&#39;
        # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-borrow: false
        # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-return: false
        # 是否缓存preparedStatement,mysql5.5&#43;建议开启
        pool-prepared-statements: true
        # 当值大于0时poolPreparedStatements会自动修改为true
        max-pool-prepared-statement-per-connection-size: 20
        # 合并多个DruidDataSource的监控数据
        use-global-data-source-stat: false
        # 配置扩展插件
        filters: stat,wall,slf4j
        # 通过connectProperties属性来打开mergeSql功能&#xff1b;慢SQL记录
        connect-properties: druid.stat.mergeSql&#61;true;druid.stat.slowSqlMillis&#61;5000
        # 定时输出统计信息到日志中&#xff0c;并每次输出日志会导致清零&#xff08;reset&#xff09;连接池相关的计数器。
        time-between-log-stats-millis: 300000
        # 配置DruidStatFilter
        web-stat-filter:
        enabled: true
        url-pattern: &#39;/*&#39;
        exclusions: &#39;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&#39;
        # 配置DruidStatViewServlet
        stat-view-servlet:
        # 是否启用StatViewServlet&#xff08;监控页面&#xff09;默认值为false&#xff08;考虑到安全问题默认并未启动&#xff0c;如需启用建议设置密码或白名单以保障安全&#xff09;
        enabled: true
        url-pattern: &#39;/druid/*&#39;
        # IP白名单(没有配置或者为空&#xff0c;则允许所有访问)
        allow: 127.0.0.1,192.168.0.1
        # IP黑名单 (存在共同时&#xff0c;deny优先于allow)
        deny: 192.168.0.128
        # 禁用HTML页面上的“Reset All”功能
        reset-enable: false
        # 登录名
        login-username: root
        # 登录密码
        login-password: root
        ​
        mybatis-plus:
        #MyBatis Mapper 所对应的 XML 文件位置
        mapperLocations:
        #MyBatis 配置文件位置
        configLocation:
        #MyBaits 别名包扫描路径
        typeAliasesPackage:
        #该配置请和 typeAliasesPackage 一起使用&#xff0c;如果配置了该属性&#xff0c;则仅仅会扫描路径下以该类作为父类的域对象
        typeAliasesSuperType:
        #TypeHandler 扫描路径&#xff0c;如果配置了该属性&#xff0c;SqlSessionFactoryBean 会把该包下面的类注册为对应的 TypeHandler
        typeHandlersPackage:
        #枚举类 扫描路径&#xff0c;如果配置了该属性&#xff0c;会将路径下的枚举类进行注入&#xff0c;让实体类字段能够简单快捷的使用枚举属性
        typeEnumsPackage:
        #Spring Boot Only,启动时是否检查 MyBatis XML 文件的存在&#xff0c;默认不检查
        checkConfigLocation: false
        #Spring Boot Only,指定执行器
        #ExecutorType.SIMPLE:该执行器类型不做特殊的事情&#xff0c;为每个语句的执行创建一个新的预处理语句&#xff08;PreparedStatement&#xff09;
        #ExecutorType.REUSE:该执行器类型会复用预处理语句&#xff08;PreparedStatement&#xff09;
        #ExecutorType.BATCH:该执行器类型会批量执行所有的更新语句
        executorType:
        #指定外部化 MyBatis Properties 配置&#xff0c;通过该配置可以抽离配置&#xff0c;实现不同环境的配置部署
        configurationProperties:
        #原生 MyBatis 所支持的配置
        configuration:
        #默认false,是否开启自动驼峰命名规则&#xff08;camel case&#xff09;映射&#xff0c;即从经典数据库列名 A_COLUMN&#xff08;下划线命名&#xff09; 到经典 Java 属性名 aColumn&#xff08;驼峰命名&#xff09; 的类似映射
        mapUnderscoreToCamelCase: false
        #默认枚举处理类,如果配置了该属性,枚举将统一使用指定处理器进行处理
        #org.apache.ibatis.type.EnumTypeHandler : 存储枚举的名称
        #org.apache.ibatis.type.EnumOrdinalTypeHandler : 存储枚举的索引
        #com.baomidou.mybatisplus.extension.handlers.MybatisEnumTypeHandler : 枚举类需要实现IEnum接口或字段标记&#64;EnumValue注解.(3.1.2以下版本为EnumTypeHandler)
        defaultEnumTypeHandler:
        #当设置为 true 的时候&#xff0c;懒加载的对象可能被任何懒属性全部加载&#xff0c;否则&#xff0c;每个属性都按需加载。需要和 lazyLoadingEnabled 一起使用。
        aggressiveLazyLoading: true
        #MyBatis 自动映射策略&#xff0c;通过该配置可指定 MyBatis 是否并且如何来自动映射数据表字段与对象的属性&#xff0c;总共有 3 种可选值:
        #AutoMappingBehavior.NONE:不启用自动映射
        #AutoMappingBehavior.PARTIAL:只对非嵌套的 resultMap 进行自动映射
        #AutoMappingBehavior.FULL:对所有的 resultMap 都进行自动映射
        autoMappingBehavior:
        #MyBatis 自动映射时未知列或未知属性处理策略&#xff0c;通过该配置可指定 MyBatis 在自动映射过程中遇到未知列或者未知属性时如何处理&#xff0c;总共有 3 种可选值&#xff1a;
        #AutoMappingUnknownColumnBehavior.NONE&#xff1a;不做任何处理 (默认值)
        #AutoMappingUnknownColumnBehavior.WARNING&#xff1a;以日志的形式打印相关警告信息
        #AutoMappingUnknownColumnBehavior.FAILING&#xff1a;当作映射失败处理&#xff0c;并抛出异常和详细信息
        autoMappingUnknownColumnBehavior:
        #Mybatis一级缓存&#xff0c;默认为 SESSION。(微服务架构中需要关闭一级缓存)
        #SESSION session级别缓存&#xff0c;同一个session相同查询语句不会再次查询数据库
        #STATEMENT 关闭一级缓存
        localCacheScope:
        #开启Mybatis二级缓存&#xff0c;默认为 true
        cacheEnabled: true
        #指定当结果集中值为 null 的时候是否调用映射对象的 Setter&#xff08;Map 对象时为 put&#xff09;方法&#xff0c;通常运用于有 Map.keySet() 依赖或 null 值初始化的情况。
        callSettersOnNulls: true
        #指定一个提供 Configuration 实例的工厂类。该工厂生产的实例将用来加载已经被反序列化对象的懒加载属性值&#xff0c;其必须包含一个签名方法static Configuration getConfiguration()。&#xff08;从 3.2.3 版本开始&#xff09;
        configurationFactory:
        global-config:
        #是否控制台 print mybatis-plus 的 LOGO
        banner: false
        #是否初始化 SqlRunner(com.baomidou.mybatisplus.extension.toolkit.SqlRunner)
        enableSqlRunner: false
        #类型&#xff1a;Class
        #默认值&#xff1a;com.baomidou.mybatisplus.core.mapper.Mapper.class
        #通用Mapper父类(影响sqlInjector,只有这个的子类的 mapper 才会注入 sqlInjector 内的 method)
        superMapperClass:
        #metaObjectHandler: 3.0开始废除此属性&#xff0c;请使用&#64;Bean的方式注入至Spring容器:
        #sqlInjector: 3.0开始废除此属性&#xff0c;请使用&#64;Bean的方式注入至Spring容器
        #identifierGenerator: 废弃
        db-config:
        #全局默认主键类型
        #类型&#xff1a;com.baomidou.mybatisplus.annotation.IdType
        #默认值&#xff1a;ASSIGN_ID
        idType:
        #表名前缀
        tablePrefix:
        #schema
        schema:
        #字段 format,例: %s,(对主键无效)
        columnFormat:
        #entity 的字段(property)的 format,只有在 column as property 这种情况下生效例: %s,(对主键无效)
        propertyFormat:
        #表名是否使用驼峰转下划线命名,只对表名生效
        tableUnderline:
        #大写命名,对表名和字段名均生效
        capitalMode:
        #表主键生成器(starter 下支持&#64;bean注入)
        keyGenerator:
        #全局的entity的逻辑删除字段属性名,(逻辑删除下有效)
        logicDeleteField:
        #逻辑已删除值,(逻辑删除下有效)
        logicDeleteValue:
        #逻辑未删除值,(逻辑删除下有效)
        logicNotDeleteValue:
        #类型&#xff1a;com.baomidou.mybatisplus.annotation.FieldStrategy
        #默认值&#xff1a;NOT_NULL
        #字段验证策略之 insert,在 insert 的时候的字段验证策略
        insertStrategy:
        #类型&#xff1a;com.baomidou.mybatisplus.annotation.FieldStrategy
        #默认值&#xff1a;NOT_NULL
        #字段验证策略之 update,在 update 的时候的字段验证策略
        updateStrategy:
        #类型&#xff1a;com.baomidou.mybatisplus.annotation.FieldStrategy
        #默认值&#xff1a;NOT_NULL
        #字段验证策略之 select,在 select 的时候的字段验证策略既 wrapper 根据内部 entity 生成的 where 条件
        selectStrategy: